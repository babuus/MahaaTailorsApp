AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: CloudFormation template for Mahaa Tailors Backend (Lambda, DynamoDB, API Gateway)

Globals:
  Api:
    Cors:
      AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
      AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
      AllowOrigin: "'*'"
      MaxAge: "'600'"
    EndpointConfiguration:
      Type: REGIONAL
    OpenApiVersion: 3.0.1
    Name: !Sub "${ProjectName}-API-${Environment}"

Parameters:
  ProjectName:
    Type: String
    Default: MahaaTailors
    Description: Name of the project, used as a prefix for resource names.
  Environment:
    Type: String
    Default: dev
    Description: The deployment environment (e.g., dev, prod).
  AWSRegion:
    Type: String
    Default: ap-south-1
    Description: The AWS region where resources will be deployed.

Resources:
  # DynamoDB Tables
  CustomersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${ProjectName}-Customers-${Environment}"
      AttributeDefinitions:
        - AttributeName: customer_id
          AttributeType: S
      KeySchema:
        - AttributeName: customer_id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  MeasurementConfigsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${ProjectName}-MeasurementConfigs-${Environment}"
      AttributeDefinitions:
        - AttributeName: garment_type
          AttributeType: S
      KeySchema:
        - AttributeName: garment_type
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  ServicesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${ProjectName}-Services-${Environment}"
      AttributeDefinitions:
        - AttributeName: service_id
          AttributeType: S
      KeySchema:
        - AttributeName: service_id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  BillsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${ProjectName}-Bills-${Environment}"
      AttributeDefinitions:
        - AttributeName: bill_id
          AttributeType: S
        - AttributeName: customer_id
          AttributeType: S
      KeySchema:
        - AttributeName: bill_id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
        - IndexName: CustomerIdIndex
          KeySchema:
            - AttributeName: customer_id
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  BillingConfigItemsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${ProjectName}-BillingConfigItems-${Environment}"
      AttributeDefinitions:
        - AttributeName: config_item_id
          AttributeType: S
      KeySchema:
        - AttributeName: config_item_id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  ReceivedItemTemplatesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${ProjectName}-ReceivedItemTemplates-${Environment}"
      AttributeDefinitions:
        - AttributeName: template_id
          AttributeType: S
      KeySchema:
        - AttributeName: template_id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  BillItemsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${ProjectName}-BillItems-${Environment}"
      AttributeDefinitions:
        - AttributeName: item_id
          AttributeType: S
        - AttributeName: bill_id
          AttributeType: S
      KeySchema:
        - AttributeName: item_id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
        - IndexName: BillIdIndex
          KeySchema:
            - AttributeName: bill_id
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  AppUpdatesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${ProjectName}-AppUpdates-${Environment}"
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: platform
          AttributeType: S
        - AttributeName: component
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
        - IndexName: PlatformComponentIndex
          KeySchema:
            - AttributeName: platform
              KeyType: HASH
            - AttributeName: component
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

  # Note: Using frontend bucket for mobile app updates instead of separate bucket
  # The UPDATES_BUCKET environment variable will be set to the frontend bucket name

  # Custom API Gateway to remove /Prod stage prefix
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "${ProjectName}-API-${Environment}"
      StageName: !Ref Environment
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"
        MaxAge: "'600'"
      EndpointConfiguration:
        Type: REGIONAL
 
  # Lambda Functions with SAM Events (handles CORS automatically)
  CustomerManagementLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${ProjectName}-CustomerManagement-${Environment}"
      Handler: index.lambda_handler
      Runtime: python3.12
      CodeUri: customer-management/
      MemorySize: 128
      Timeout: 30
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CustomersTable
        - DynamoDBCrudPolicy:
            TableName: !Ref MeasurementConfigsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref BillsTable
      Environment:
        Variables:
          CUSTOMERS_TABLE_NAME: !Ref CustomersTable
          MEASUREMENT_CONFIGS_TABLE_NAME: !Ref MeasurementConfigsTable
          BILLS_TABLE_NAME: !Ref BillsTable
      Events:
        GetCustomers:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /customers
            Method: get
        AddCustomer:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /customers
            Method: post
        UpdateCustomer:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /customers/{id}
            Method: put
        DeleteCustomer:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /customers/{id}
            Method: delete
        GetCustomerById:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /customers/{id}
            Method: get
        CheckCustomerExists:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /customers/exists
            Method: get
        CustomersOptions:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /customers
            Method: options
        CustomerExistsOptions:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /customers/exists
            Method: options
        CustomerIdOptions:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /customers/{id}
            Method: options
        GetCustomerMeasurements:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /customers/{id}/measurements
            Method: get
        SaveCustomerMeasurement:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /customers/{id}/measurements
            Method: post
        DeleteCustomerMeasurement:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /customers/{id}/measurements/{measurementId}
            Method: delete

  MeasurementConfigLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${ProjectName}-MeasurementConfig-${Environment}"
      Handler: index.lambda_handler
      Runtime: python3.12
      CodeUri: measurement-config/
      MemorySize: 128
      Timeout: 30
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref MeasurementConfigsTable
      Environment:
        Variables:
          MEASUREMENT_CONFIGS_TABLE_NAME: !Ref MeasurementConfigsTable
      Events:
        GetMeasurementConfigs:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /measurement-configs
            Method: get
        AddMeasurementConfig:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /measurement-configs
            Method: post
        UpdateMeasurementConfig:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /measurement-configs/{id}
            Method: put
        DeleteMeasurementConfig:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /measurement-configs/{id}
            Method: delete
        MeasurementConfigsOptions:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /measurement-configs
            Method: options
        MeasurementConfigIdOptions:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /measurement-configs/{id}
            Method: options

  ServicesLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${ProjectName}-Services-${Environment}"
      Handler: index.lambda_handler
      Runtime: python3.12
      CodeUri: services/
      MemorySize: 128
      Timeout: 30
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ServicesTable
      Environment:
        Variables:
          SERVICES_TABLE_NAME: !Ref ServicesTable
      Events:
        GetServices:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /services
            Method: get
        AddService:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /services
            Method: post
        UpdateService:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /services/{id}
            Method: put
        DeleteService:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /services/{id}
            Method: delete
        ServicesOptions:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /services
            Method: options
        ServiceIdOptions:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /services/{id}
            Method: options

  BillingLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${ProjectName}-Billing-${Environment}"
      Handler: index.lambda_handler
      Runtime: python3.12
      CodeUri: billing/
      MemorySize: 128
      Timeout: 30
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref BillsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref CustomersTable
        - DynamoDBCrudPolicy:
            TableName: !Ref BillingConfigItemsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref ReceivedItemTemplatesTable
        - DynamoDBCrudPolicy:
            TableName: !Ref BillItemsTable
      Environment:
        Variables:
          BILLS_TABLE_NAME: !Ref BillsTable
          CUSTOMERS_TABLE_NAME: !Ref CustomersTable
          BILLING_CONFIG_ITEMS_TABLE_NAME: !Ref BillingConfigItemsTable
          RECEIVED_ITEM_TEMPLATES_TABLE_NAME: !Ref ReceivedItemTemplatesTable
          BILL_ITEMS_TABLE_NAME: !Ref BillItemsTable
      Events:
        GetBills:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /bills
            Method: get
        AddBill:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /bills
            Method: post
        UpdateBill:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /bills/{id}
            Method: put
        GetBillById:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /bills/{id}
            Method: get
        DeleteBill:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /bills/{id}
            Method: delete
        BillsOptions:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /bills
            Method: options
        BillIdOptions:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /bills/{id}
            Method: options
        CustomerMeasurementsOptions:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /customers/{id}/measurements
            Method: options
        CustomerMeasurementIdOptions:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /customers/{id}/measurements/{measurementId}
            Method: options
        AddPayment:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /bills/{id}/payments
            Method: post
        UpdatePayment:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /bills/{id}/payments/{paymentId}
            Method: put
        DeletePayment:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /bills/{id}/payments/{paymentId}
            Method: delete
        PaymentsOptions:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /bills/{id}/payments
            Method: options
        PaymentIdOptions:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /bills/{id}/payments/{paymentId}
            Method: options
        GetBillingConfigItems:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /billing-config-items
            Method: get
        AddBillingConfigItem:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /billing-config-items
            Method: post
        UpdateBillingConfigItem:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /billing-config-items/{id}
            Method: put
        DeleteBillingConfigItem:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /billing-config-items/{id}
            Method: delete
        BillingConfigItemsOptions:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /billing-config-items
            Method: options
        BillingConfigItemIdOptions:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /billing-config-items/{id}
            Method: options
        GetReceivedItemTemplates:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /received-item-templates
            Method: get
        AddReceivedItemTemplate:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /received-item-templates
            Method: post
        UpdateReceivedItemTemplate:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /received-item-templates/{id}
            Method: put
        DeleteReceivedItemTemplate:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /received-item-templates/{id}
            Method: delete
        ReceivedItemTemplatesOptions:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /received-item-templates
            Method: options
        ReceivedItemTemplateIdOptions:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /received-item-templates/{id}
            Method: options
        MigrateLegacyBillItems:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /bills/migrate-legacy-items
            Method: post
        MigrateLegacyBillItemsOptions:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /bills/migrate-legacy-items
            Method: options

  AppUpdatesLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${ProjectName}-AppUpdates-${Environment}"
      Handler: index.lambda_handler
      Runtime: python3.12
      CodeUri: app-updates/
      MemorySize: 128
      Timeout: 30
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref AppUpdatesTable
        - Statement:
            - Effect: Allow
              Action:
                - s3:GetObjectVersion
                - s3:GetObject
                - s3:GeneratePresignedUrl
              Resource: 
                - !Sub "arn:aws:s3:::mahaatailors-frontend-${Environment}/*"
                - !Sub "arn:aws:s3:::mahaatailors-frontend-${Environment}"
      Environment:
        Variables:
          UPDATES_TABLE: !Ref AppUpdatesTable
          UPDATES_BUCKET: !Sub "mahaatailors-frontend-${Environment}"
      Events:
        CheckUpdates:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /app-updates/check-updates
            Method: get
        DownloadUpdate:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /app-updates/download-update
            Method: get
        RegisterVersion:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /app-updates/register-version
            Method: post
        AppUpdatesOptions:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /app-updates/{proxy+}
            Method: options

Outputs:
  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub "https://${ApiGatewayApi}.execute-api.${AWSRegion}.amazonaws.com/${Environment}"
  ApiEndpointWithStage:
    Description: API Gateway endpoint URL with stage
    Value: !Sub "https://${ApiGatewayApi}.execute-api.${AWSRegion}.amazonaws.com/${Environment}"